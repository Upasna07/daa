Program for Kruskalâ€™s Algorithm
 import java.util.*;
 class Edge implements Comparable<Edge> {
 int source, destination, weight;
 // Comparator function used for sorting edges based on their weight
 public int compareTo(Edge compareEdge) {
 return this.weight- compareEdge.weight;
 }
 }
 class Subset {
 int parent, rank;
 }
 public class KruskalMST {
 int vertices, edges; // Number of vertices and edges
 Edge[] edge; // Collection of all edges
 // Constructor to initialize the graph
 KruskalMST(int vertices, int edges) {
 this.vertices = vertices;
 this.edges = edges;
 edge = new Edge[edges];
 for (int i = 0; i < edges; ++i) {
 edge[i] = new Edge();
 }
 }
 // Function to find the set (or parent) of an element u using path compression
 int find(Subset[] subsets, int u) {
 if (subsets[u].parent != u) {
 subsets[u].parent = find(subsets, subsets[u].parent);
 }
 return subsets[u].parent;
 }
 // Function to perform union of two sets by rank
 void union(Subset[] subsets, int u, int v) {
 int rootU = find(subsets, u);
 int rootV = find(subsets, v);
 if (subsets[rootU].rank < subsets[rootV].rank) {
 subsets[rootU].parent = rootV;
 } else if (subsets[rootU].rank > subsets[rootV].rank) {
 subsets[rootV].parent = rootU;
 } else {
 subsets[rootV].parent = rootU;
 subsets[rootU].rank++;
 }
 }
 // The main function to construct MST using Kruskal's algorithm
 void kruskalMST() {
 Edge[] result = new Edge[vertices]; // This will store the resultant MST
 int e = 0; // An index variable, used for result[]
 int i = 0; // An index variable, used for sorted edges
 for (i = 0; i < vertices; ++i) {
 result[i] = new Edge();
 }
// Step 1: Sort all the edges in non-decreasing order of their weight
 Arrays.sort(edge);
 // Allocate memory for creating V subsets
 Subset[] subsets = new Subset[vertices];
 for (i = 0; i < vertices; ++i) {
 subsets[i] = new Subset();
 subsets[i].parent = i;
 subsets[i].rank = 0;
 }
 i = 0; // Initial index of sorted edges
 // Number of edges to be taken is equal to vertices-1
 while (e < vertices- 1) {
 // Step 2: Pick the smallest edge. Check if it forms a cycle.
 Edge nextEdge = edge[i++];
 int u = find(subsets, nextEdge.source);
 int v = find(subsets, nextEdge.destination);
 // If including this edge does not form a cycle, include it in the result
 if (u != v) {
 result[e++] = nextEdge;
 union(subsets, u, v);
 }
 }
 // Print the result
 System.out.println("Minimum Spanning Tree (MST) Edges:");
 System.out.println("Source- Destination Weight");
 for (i = 0; i < e; ++i) {
 System.out.println((result[i].source + 1) + "- " + (result[i].destination + 1) + " " + result[i].weight);
 }
 }
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter the number of vertices: ");
 int vertices = sc.nextInt();
 System.out.print("Enter the number of edges: ");
 int edges = sc.nextInt();
 KruskalMST graph = new KruskalMST(vertices, edges);
 System.out.println("Enter the edges and their weights (source destination weight):");
 for (int i = 0; i < edges; i++) {
 graph.edge[i].source = sc.nextInt()- 1;
 graph.edge[i].destination = sc.nextInt()- 1;
 graph.edge[i].weight = sc.nextInt();
 }
 long startTime = System.nanoTime();
 graph.kruskalMST();
 long endTime = System.nanoTime();
 long timeTaken = endTime- startTime;
 System.out.println("\nTime taken to perform Kruskal's algorithm: " + timeTaken + " nanoseconds");
 sc.close();
 }
