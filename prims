Program for Primâ€™s Algorithm
 import java.util.Scanner;
 public class PrimMST {
 static final int N = 10;
 static final int INF = Integer.MAX_VALUE;
 // Function to display the MST
 static void displayMST(int[] parent, int[][] graph, int V) {
 System.out.println("\nMinimum Spanning Tree (MST) Edges:");
 System.out.println("Edge Weight");
 for (int i = 1; i < V; i++) {
 System.out.println((parent[i] + 1) + "- " + (i + 1) + " " + graph[i][parent[i]]);
 }
 }
 // Function to implement Prim's algorithm to find the MST
 static void primMST(int[][] graph, int V, int[] parent) {
 int[] key = new int[V]; // Key values used to pick minimum weight edge in cut
 boolean[] mstSet = new boolean[V]; // To represent set of vertices included in MST
 for (int i = 0; i < V; i++) {
 key[i] = INF;
 mstSet[i] = false;
 }
 key[0] = 0; // Make key 0sothatthis vertex is picked as first vertex
 parent[0] =-1; // First node is always root of MST
 for (int count = 0; count < V- 1; count++) {
 int u =-1; // Pick the minimum key vertex from the set of vertices not yet included in MST
 for (int v = 0; v < V; v++) {
 if (!mstSet[v] && (u ==-1 || key[v] < key[u])) {
 u =v;
 }
 }
 // Add the picked vertex to the MST Set
 mstSet[u] = true;
 // Update key value and parent index of the adjacent vertices of the picked vertex
 for (int v = 0; v < V; v++) {
 if (graph[u][v] != 0 && !mstSet[v] && graph[u][v] < key[v]) {
 parent[v] = u;
 key[v] = graph[u][v];
 }
 }
 }
 displayMST(parent, graph, V);
 }
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int V, E;
 int[][] graph = new int[N][N]; // Initialize graph with all zeros
 int[] parent = new int[N];
 System.out.print("Enter the number of vertices: ");
 V =sc.nextInt();
 System.out.print("Enter the number of edges: ");
E=sc.nextInt();
 System.out.println("Entertheedgesandtheirweights(sourcedestinationweight):");
 for(inti=0;i<E;i++){
 intsource=sc.nextInt();
 intdestination=sc.nextInt();
 intweight=sc.nextInt();
 graph[source-1][destination-1]=weight;
 graph[destination-1][source-1]=weight;//Forundirectedgraph,addbothdirections
 }
 System.out.println("TheWeightedAdjacencyMatrixis:");
 for(inti=0;i<V;i++){
 for(intj=0;j<V;j++){
 System.out.print(graph[i][j]+"\t");
 }
 System.out.println();
 }
 longstartTime=System.nanoTime();
 primMST(graph,V,parent);
 longendTime=System.nanoTime();
 longtimeTaken=endTime-startTime;
 System.out.println("\nTimetakentoperformPrim'salgorithm:"+timeTaken+"nanoseconds");
 sc.close();
 }
 }
