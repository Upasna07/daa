Program for Dijkstra Algorithm(Adjacency Matrix Implementation)
 import java.util.*;
 class Dijkstra {
 private static final int INF = Integer.MAX_VALUE;
 int minDistance(int[] dist, boolean[] sptSet, int V) {
 int min = INF, minIndex =-1;
 for (int v = 0; v < V; v++) {
 if (!sptSet[v] && dist[v] <= min) {
 min =dist[v];
 minIndex = v;
 }
 }
 return minIndex;
 }
 void dijkstra(int[][] graph, int src, int V) {
 int[] dist = new int[V];
 boolean[] sptSet = new boolean[V];
 for (int i = 0; i < V; i++) {
 dist[i] = INF;
 sptSet[i] = false;
 }
 dist[src] = 0;
 for (int count = 0; count < V- 1; count++) {
 int u = minDistance(dist, sptSet, V);
 sptSet[u] = true;
 for (int v = 0; v < V; v++) {
 if (!sptSet[v] && graph[u][v] != 0 && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
 dist[v] = dist[u] + graph[u][v];
 }
 }
 }
 printSolution(dist, V);
 }
 void printSolution(int[] dist, int V) {
 System.out.println("Vertex \t Distance from Source");
 for (int i = 0; i < V; i++) {
 System.out.println((i + 1) + " \t " + dist[i]);
 }
 }
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 System.out.println("Enter the number of vertices: ");
 int V = sc.nextInt();
 int[][] graph = new int[V][V];
 System.out.println("Enter the number of edges: ");
intE=sc.nextInt();
 System.out.println("Entertheedgesandtheirweights(format:fromtoweight):");
 for(inti=0;i<E;i++){
 intfrom=sc.nextInt()-1;
 intto=sc.nextInt()-1;
 intweight=sc.nextInt();
 graph[from][to]=weight;
 graph[to][from]=weight;
 }
 System.out.println("Enterthesourcevertex:");
 intsrc=sc.nextInt()-1;
 Dijkstrat=newDijkstra();
 t.dijkstra(graph,src,V);
 sc.close();
 }
 }
