import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class QuickSort {
    // Partition method to place pivot in the correct position
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // Choosing the last element as the pivot
        int i = low - 1;       // Index for the smaller element

        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i + 1] and arr[high] (pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1; // Return the partition index
    }

    // QuickSort recursive method
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Find partition index
            int pi = partition(arr, low, high);

            // Recursively sort elements before and after partition
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Random rand = new Random();

        // Input the number of elements
        System.out.print("Enter the number of elements: ");
        int n = sc.nextInt();
        int[] arr = new int[n];

        // Generate random elements
        System.out.println("Generating random elements...");
        for (int i = 0; i < n; i++) {
            arr[i] = rand.nextInt(100000); // Random values in the range [0, 100000)
        }

        System.out.println("Unsorted array: " + Arrays.toString(arr));

        // Measure execution time
        long startTime = System.nanoTime();
        quickSort(arr, 0, arr.length - 1);
        long endTime = System.nanoTime();

        // Output the sorted array and execution time
        System.out.println("Sorted array: " + Arrays.toString(arr));
        long duration = endTime - startTime;
        System.out.println("Execution time: " + duration + " nanoseconds");

        sc.close();
    }
}
