Program For Merge Sort
 import java.util.Arrays;
 import java.util.Random;
 import java.util.Scanner;
 public class MergeSort {
 public static void merge(int[] arr, int left, int mid, int right) {
 int n1 = mid- left + 1;
 int n2 = right- mid;
 int[] L = new int[n1];
 int[] R = new int[n2];
 for (int i = 0; i < n1; i++) {
 L[i] = arr[left + i];
 }
 for (int i = 0; i < n2; i++) {
 R[i] = arr[mid + 1 + i];
 }
 int i = 0, j = 0;
 int k = left;
 while (i < n1 && j < n2) {
 if (L[i] <= R[j]) {
 arr[k] = L[i];
 i++;
 } else {
 arr[k] = R[j];
 j++;
 }
 k++;
 }
 while (i < n1) {
 arr[k] = L[i];
 i++;
 k++;
 }
 while (j < n2) {
 arr[k] = R[j];
 j++;
 k++;
 }
 }
 public static void mergeSort(int[] arr, int left, int right) {
 if (left < right) {
 int mid = left + (right- left) / 2;
 mergeSort(arr, left, mid);
 mergeSort(arr, mid + 1, right);
 merge(arr, left, mid, right);
 }
 }
 public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
 Random rand =new Random();
 System.out.print("Enter the number of elements: ");
 int n = sc.nextInt();
 int[] arr = new int[n];
 System.out.println("Generating random elements...");
 for (int i = 0; i < n; i++) {
 arr[i] = rand.nextInt(100000);
 }
 System.out.println("Unsorted array: " + Arrays.toString(arr));
 long startTime = System.nanoTime();
 mergeSort(arr, 0, arr.length- 1);
 long endTime = System.nanoTime();
 System.out.println("Sorted array: " + Arrays.toString(arr));
 long duration = endTime- startTime;
 System.out.println("Execution time: " + duration + " nanoseconds");
 sc.close();
 }
 }
