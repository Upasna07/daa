Recursive Binary Search
 import java.util.Arrays;
 import java.util.Random;
 import java.util.Scanner;
 public class RecursiveBinarySearch {
 public static int binarySearch(int[] arr, int left, int right, int key) {
 if (right >= left) {
 int mid = left + (right- left) / 2;
 if (arr[mid] == key) {
 return mid;
 }
 if (arr[mid] > key) {
 return binarySearch(arr, left, mid- 1, key);
 }
 return binarySearch(arr, mid + 1, right, key);
 }
 return-1;
 }
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 Random rand =new Random();
 System.out.print("Enter the number of elements: ");
 int n = sc.nextInt();
 int[] arr = new int[n];
 System.out.println("Generating random elements...");
 for (int i = 0; i < n; i++) {
 arr[i] = rand.nextInt(1000);
 }
 Arrays.sort(arr);
 System.out.println("Generated sorted array: " + Arrays.toString(arr));
 System.out.print("Enter the element to search: ");
 int key = sc.nextInt();
 long startTime = System.nanoTime();
 int result = binarySearch(arr, 0, n- 1, key);
 long endTime = System.nanoTime();
 if (result ==-1) {
 System.out.println("Element not present in the array.");
 } else {
 System.out.println("Element found at index: " + result);
 }
 long duration = endTime- startTime;
 System.out.println("Execution time (recursive): " + duration + " nanoseconds");
 sc.close();
 }
 }
