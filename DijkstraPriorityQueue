Program for Dijkstra Algorithm(Priority Queue Implementation)
 import java.util.*;
 class Dijkstra {
 static class Node implements Comparable<Node> {
 int vertex, distance;
 Node(int v, int d) {
 vertex = v;
 distance = d;
 }
 public int compareTo(Node other) {
 return Integer.compare(this.distance, other.distance);
 }
 }
 static void dijkstra(int[][] graph, int source) {
 int n = graph.length;
 int[] dist = new int[n];
 boolean[] visited = new boolean[n];
 PriorityQueue<Node> pq = new PriorityQueue<>();
 Arrays.fill(dist, Integer.MAX_VALUE);
 dist[source] = 0;
 pq.add(new Node(source, 0));
 while (!pq.isEmpty()) {
 Node node =pq.poll();
 int u = node.vertex;
 if (visited[u]) continue;
 visited[u] = true;
 for (int v = 0; v < n; v++) {
 if (graph[u][v] != 0 && !visited[v]) {
 int newDist = dist[u] + graph[u][v];
 if (newDist < dist[v]) {
 dist[v] = newDist;
 pq.add(new Node(v, dist[v]));
 }
 }
 }
 }
 System.out.println("Vertex distances from source:");
 for (int i = 0; i < n; i++) {
 System.out.println("Vertex " + i + ": " + dist[i]);
 }
 }
 public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter number of vertices: ");
 int vertices = sc.nextInt();
 int[][] graph = new int[vertices][vertices];
 System.out.print("Enter number of edges: ");
 int edges = sc.nextInt();
System.out.println("Enteredges(sourcedestinationweight):");
 for(inti=0;i<edges;i++){
 intsrc=sc.nextInt()-1; //Convertingto0-basedindex
 intdest=sc.nextInt()-1;//Convertingto0-basedindex
 intweight=sc.nextInt();
 graph[src][dest]=weight;
 graph[dest][src]=weight;//Forundirectedgraph
 }
 System.out.print("Entersourcevertex:");
 intsource=sc.nextInt()-1;//Convertingto0-basedindex
 longstartTime=System.nanoTime();
 dijkstra(graph,source);
 longendTime=System.nanoTime();
 System.out.println("Executiontime:"+(endTime-startTime)+"nanoseconds");
 }
 }
